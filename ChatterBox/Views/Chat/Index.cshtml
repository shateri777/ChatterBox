@model ChatterBox.ViewModels.ChatViewModel
@{
    ViewData["Title"] = "Chat";
}

<div class="container-fluid h-100">
    <div class="row h-100">
        <div class="col-12 d-flex flex-column mt-3" style="height: calc(100vh - 320px);">
            
            <div class="input-group mb-3 mt-2">
                <input type="text" id="messageInput" class="form-control" placeholder="Skriv ditt meddelande här..." maxlength="1000">
                <button class="btn btn-primary" type="button" id="sendButton">
                    <i class="bi bi-send"></i> Skicka
                </button>
            </div>

            
            <div id="messagesContainer" class="flex-grow-1 overflow-auto p-3 border rounded" style="background-color: #f8f9fa;">
                @if (Model.Messages != null)
                {
                    @foreach (var message in Model.Messages)
                    {
                        <div class="message-item mb-3">
                            <div class="ai-message mb-2">
                                <div class="bg-light p-2 rounded d-inline-block">
                                    @message.AiResponse
                                </div>
                                <small class="text-muted ms-2">@message.CreatedAt.ToString("dd/MM HH:mm")</small>
                            </div>
                            <div class="user-message">
                                <div class="bg-primary text-white p-2 rounded d-inline-block">
                                    @message.UserPrompt
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>
document.addEventListener('DOMContentLoaded', function() {
    const messageInput = document.getElementById('messageInput');
    const sendButton = document.getElementById('sendButton');
    const messagesContainer = document.getElementById('messagesContainer');
    
    
    messagesContainer.scrollTop = 0;
    
    
    function addPendingMessageToUI(userMessage) {
        const wrapper = document.createElement('div');
        wrapper.innerHTML = `
            <div class="message-item mb-3 pending">
                <div class="ai-message mb-2">
                    <div class="bg-light p-2 rounded d-inline-block ai-content">
                        <span class="spinner-border spinner-border-sm text-secondary me-2" role="status"></span>
                        AI skriver…
                    </div>
                    <small class="text-muted ms-2 ai-timestamp"></small>
                </div>
                <div class="user-message">
                    <div class="bg-primary text-white p-2 rounded d-inline-block user-bubble"></div>
                </div>
            </div>`;
        const messageDiv = wrapper.firstElementChild;
        messageDiv.querySelector('.user-bubble').textContent = userMessage;
        messagesContainer.insertBefore(messageDiv, messagesContainer.firstChild);
        messagesContainer.scrollTop = 0;
        return messageDiv;
    }

    function resolvePendingMessage(messageDiv, aiResponse, timestamp) {
        messageDiv.querySelector('.ai-timestamp').textContent = timestamp;
        const aiContent = messageDiv.querySelector('.ai-content');
        aiContent.textContent = aiResponse;
        messageDiv.classList.remove('pending');
        messagesContainer.scrollTop = 0;
    }
    
    function sendMessage() {
        const message = messageInput.value.trim();
        if (!message) return;
        
        
        messageInput.disabled = true;
        sendButton.disabled = true;
        sendButton.innerHTML = '<i class="bi bi-hourglass-split"></i> Väntar...';
        
        
        const pendingDiv = addPendingMessageToUI(message);
        
        fetch('/Chat/SendMessage', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ message: message })
        })
        .then(response => response.json())
                .then(data => {
          const stamp = new Date(data.createdAt)
            .toLocaleString('sv-SE', { day:'2-digit', month:'2-digit', hour:'2-digit', minute:'2-digit' });

          if (data.userPrompt && data.aiResponse) {
            resolvePendingMessage(pendingDiv, data.aiResponse, stamp);
          } else {
            pendingDiv.querySelector('.ai-content').textContent = 'Ett fel uppstod när AI-svaret hämtades.';
          }
          messageInput.value = '';
        })
        .catch(error => {
            console.error('Error:', error);
            pendingDiv.querySelector('.ai-content').textContent = 'Ett fel uppstod när meddelandet skickades.';
        })
        .finally(() => {
            
            messageInput.disabled = false;
            sendButton.disabled = false;
            sendButton.innerHTML = '<i class="bi bi-send"></i> Skicka';
            messageInput.focus();
        });
    }
    
    
    sendButton.addEventListener('click', sendMessage);
    messageInput.addEventListener('keydown', function(e) {
        if (e.key === 'Enter') {
            e.preventDefault();
            sendMessage();
        }
    });
    
    
    messageInput.focus();
});
</script>
}